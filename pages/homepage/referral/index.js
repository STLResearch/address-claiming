'use client';

import { Fragment, useEffect, useState } from 'react';
import Script from 'next/script';
import Sidebar from '@/Components/Sidebar';
import PageHeader from '@/Components/PageHeader';
import {
  EarthIcon,
  GiftIcon,
  ShareIcon,
  FacebookIcon,
  LinkedInIcon,
  GoogleIcon,
  XIcon,
  FriendsIcon,
  PropertyIcon,
} from '@/Components/Icons';
import { useMobile } from '@/hooks/useMobile';
import useDatabase from '@/hooks/useDatabase';
import { useAuth } from '@/hooks/useAuth';
import useOrigin from '@/hooks/useOrigin';
import Head from 'next/head';

const Item = ({ icon, title, text }) => {
  return (
    <div
      className='flex w-full flex-col items-center gap-[15px] rounded-[30px] bg-white px-[15px] py-5 md:h-[223px] md:min-w-[225px]'
      style={{ boxShadow: '0px 12px 34px -10px #3A4DE926' }}
    >
      <div
        className='flex h-[63px] w-[63px] items-center justify-center bg-[#E9F5FE]'
        style={{ borderRadius: '50%' }}
      >
        <div className='flex h-9 w-9 items-center justify-center'>{icon}</div>
      </div>
      <p className='text-[18px] font-semibold text-[#4285F4]'>{title}</p>
      <p className='text-center text-[14px] font-normal text-[#222222]'>
        {text}
      </p>
    </div>
  );
};

const Path = () => {
  return (
    <div
      className='h-1 w-[15px] rotate-90 md:w-full md:rotate-0'
      style={{ borderTop: '2px dashed #4285F4' }}
    />
  );
};

const AlertMessage = () => {
  return (
    <div
      className='absolute right-0 top-5 hidden bg-white px-[26px] py-[14px] text-[14px] text-[#0000FF] md:block'
      style={{
        borderLeft: '6px solid #0000FF',
        boxShadow: '0px 0px 40px 0px #0813391A',
      }}
    >
      <span className='font-bold'>Refer now!</span> First 500 users score a
      one-time bonus. Act fast!
    </div>
  );
};

const TheProgram = ({ activeSection, section, isMobile }) => {
  if (activeSection !== section && isMobile) return;

  return (
    <Fragment>
      <div className='flex flex-col gap-[15px] px-[40px]'>
        <p className='text-xl font-normal text-[#222222]'>
          Share and Earn! ðŸš€âœ¨
        </p>
        <p className='text-[15px] font-normal text-[#87878D]'>
          Invite your friends and neighbours to SkyTrade. If they register and
          claim airspaces, you receive:
        </p>
        <p className='text-[15px] font-normal text-[#4285F4]'>
          <span className='text-[20px] font-bold'>+50 credits to you</span> for
          each successful referral registration and{' '}
          <span className='text-[20px] font-bold'>+50 credits</span> to the
          successfully referred person
          <br />
          <span className='text-[20px] font-bold'>+10%</span> on top of the
          passive income generated by those you refer{' '}
          <span className='text-[20px] font-bold'>FOREVER</span>
        </p>
      </div>
      <div className='flex flex-col items-center justify-center gap-4 px-[35px] md:flex-row md:gap-9 md:px-[51px]'>
        <Item
          icon={<ShareIcon />}
          title={'Share'}
          text={
            'Send your invite link or code to your friends and explain them how cool is SkyTrade'
          }
        />
        <Path />
        <Item
          icon={<EarthIcon isActive={true} />}
          title={'Register & Claim'}
          text={
            'Let them register and claim their airspaces using your referral link or code'
          }
        />
        <Path />
        <Item
          icon={<GiftIcon isActive={true} />}
          title={'Earn'}
          text={'You and your friends are rewarded with 50 credits and more'}
        />
      </div>
    </Fragment>
  );
};

const Share = ({
  activeSection,
  section,
  isMobile,
  referralCode,
  blockchainAddress,
  user,
}) => {
  if (activeSection !== section && isMobile) return;
  const [isCopied, setIsCopied] = useState({ code: false, link: false });
  const [temporalReferralCode, setTemporalReferralCode] =
    useState(referralCode);
  const { updateReferral } = useDatabase();
  const { updateProfile } = useAuth();
  const origin = useOrigin();

  useEffect(() => {
    if (!isCopied.code) return;
    let timeoutId;
    (() => {
      timeoutId = setTimeout(() => {
        setIsCopied((prev) => ({ ...prev, code: false }));
      }, 2000);
    })();

    return () => timeoutId && clearTimeout(timeoutId);
  }, [isCopied.code]);

  useEffect(() => {
    if (!isCopied.link) return;
    let timeoutId;
    (() => {
      timeoutId = setTimeout(() => {
        setIsCopied((prev) => ({ ...prev, link: false }));
      }, 2000);
    })();

    return () => timeoutId && clearTimeout(timeoutId);
  }, [isCopied.link]);

  useEffect(() => {
    setTemporalReferralCode(referralCode);
  }, [referralCode]);

  const handleCopy = (e, text, isCode) => {
    e.preventDefault();
    navigator.clipboard.writeText(text);
    setIsCopied((prev) => ({
      code: isCode ? true : prev.code,
      link: !isCode ? true : prev.link,
    }));
  };

  const handleOnChange = (e) => {
    setTemporalReferralCode(e.target.value);
  };

  const handleUpdateReferralCode = async () => {
    try {
      const {
        ownedReferralCode: { id },
      } = user;
      await updateReferral(blockchainAddress, temporalReferralCode);
      updateProfile({
        ownedReferralCode: {
          id: id,
          code: temporalReferralCode,
          codeChanged: true,
        },
      });
    } catch (error) {
      console.log(error);
      setTemporalReferralCode(referralCode);
    }
  };

  const shareOnGoogle = (textToShare) => {
    window.open(
      `https://plus.google.com/share?url=${encodeURIComponent(textToShare)}`,
      '_blank'
    );
  };

  const shareOnFacebook = (textToShare) => {
    window.open(
      `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(textToShare)}`,
      '_blank'
    );
  };

  const shareOnTwitter = (textToShare) => {
    window.open(
      `https://twitter.com/intent/tweet?text=${encodeURIComponent(textToShare)}`,
      '_blank'
    );
  };

  const shareOnLinkedIn = (textToShare) => {
    window.open(
      `https://www.linkedin.com/shareArticle?url=${encodeURIComponent(textToShare)}`,
      '_blank'
    );
  };

  const canCopy = referralCode === temporalReferralCode;
  const canChangeCode = !canCopy && temporalReferralCode.length === 6;

  return (
    <div className='flex flex-wrap gap-8'>
      <div className='flex flex-col gap-[15px] px-[51px]'>
        <p className='text-xl font-normal text-[#222222]'>
          Share the referral link or code
        </p>
        <p className='text-[15px] font-normal text-[#87878D]'>
          You can also share your referral link or code by copying and sending
          it or sharing it on your social media. You can define your code once
          by entering your prefered value and press enter.
        </p>
        <div className='flex flex-wrap gap-[21px]'>
          <div className='flex flex-wrap justify-between gap-[9px]'>
            <div className='relative w-full md:w-[300px]'>
              <input
                value={temporalReferralCode}
                disabled={user?.ownedReferralCode?.codeChanged}
                onChange={handleOnChange}
                maxLength={6}
                className='w-full rounded-lg bg-[#DFF1FF] py-[14px] pl-[22px] pr-[95px] text-[14px] text-[#222222] focus:outline-none'
                type='text'
                name='myReferralCode'
                id='myReferralCode'
              />
              {canCopy && (
                <p
                  onClick={(e) => handleCopy(e, referralCode, true)}
                  className='absolute right-[22px] top-1/2 -translate-y-1/2 cursor-pointer text-[14px] text-[#0653EA]'
                >
                  {isCopied.code ? 'Copied âœ“' : 'Copy code'}
                </p>
              )}
              {canChangeCode && (
                <p
                  onClick={handleUpdateReferralCode}
                  className='absolute right-[22px] top-1/2 -translate-y-1/2 cursor-pointer text-[14px] text-[#0653EA]'
                >
                  {'Update code'}
                </p>
              )}
            </div>
            <div
              onClick={() => shareOnFacebook(referralCode)}
              className='flex cursor-pointer items-center justify-center rounded-lg bg-[#DFF1FF] px-[13.9px] py-[14px]'
            >
              <div className='flex h-5 w-5 items-center justify-center'>
                <FacebookIcon />
              </div>
            </div>
            <div
              onClick={() => shareOnLinkedIn(referralCode)}
              className='flex cursor-pointer items-center justify-center rounded-lg bg-[#DFF1FF] px-[13.9px] py-[14px]'
            >
              <div className='flex h-5 w-5 items-center justify-center'>
                <LinkedInIcon />
              </div>
            </div>
            <div
              onClick={() => shareOnGoogle(referralCode)}
              className='flex cursor-pointer items-center justify-center rounded-lg bg-[#DFF1FF] px-[13.9px] py-[14px]'
            >
              <div className='flex h-5 w-5 items-center justify-center'>
                <GoogleIcon />
              </div>
            </div>
            <div
              onClick={() => shareOnTwitter(referralCode)}
              className='flex cursor-pointer items-center justify-center rounded-lg bg-[#DFF1FF] px-[13.9px] py-[14px]'
            >
              <div className='flex h-5 w-5 items-center justify-center'>
                <XIcon />
              </div>
            </div>
          </div>
          <div className='flex flex-wrap justify-between gap-[9px]'>
            <div className='relative w-full md:w-[300px]'>
              <input
                value={`${origin}/r/${referralCode}`}
                disabled
                className='w-full rounded-lg bg-[#DFF1FF] px-[22px] py-[14px] pr-[95px] text-[14px] text-[#222222] focus:outline-none'
                type='text'
                name='myReferralCode'
                id='myReferralCode'
              />
              <p
                onClick={(e) =>
                  handleCopy(e, `${origin}/r/${referralCode}`, false)
                }
                className='absolute right-[22px] top-1/2 -translate-y-1/2 cursor-pointer text-[14px] text-[#0653EA]'
              >
                {isCopied.link ? 'Copied âœ“' : 'Copy link'}
              </p>
            </div>
            <div
              onClick={() => shareOnFacebook(`${origin}/r/${referralCode}`)}
              className='flex cursor-pointer items-center justify-center rounded-lg bg-[#DFF1FF] px-[13.9px] py-[14px]'
            >
              <div className='flex h-5 w-5 items-center justify-center'>
                <FacebookIcon />
              </div>
            </div>
            <div
              onClick={() => shareOnLinkedIn(`${origin}/r/${referralCode}`)}
              className='flex cursor-pointer items-center justify-center rounded-lg bg-[#DFF1FF] px-[13.9px] py-[14px]'
            >
              <div className='flex h-5 w-5 items-center justify-center'>
                <LinkedInIcon />
              </div>
            </div>
            <div
              onClick={() => shareOnGoogle(`${origin}/r/${referralCode}`)}
              className='flex cursor-pointer items-center justify-center rounded-lg bg-[#DFF1FF] px-[13.9px] py-[14px]'
            >
              <div className='flex h-5 w-5 items-center justify-center'>
                <GoogleIcon />
              </div>
            </div>
            <div
              onClick={() => shareOnTwitter(`${origin}/r/${referralCode}`)}
              className='flex cursor-pointer items-center justify-center rounded-lg bg-[#DFF1FF] px-[13.9px] py-[14px]'
            >
              <div className='flex h-5 w-5 items-center justify-center'>
                <XIcon />
              </div>
            </div>
          </div>
        </div>
      </div>
      <InviteYourFriends />
    </div>
  );
};

const YourReferralsItem = ({ icon, number, text }) => {
  return (
    <div className='flex items-center gap-[17px]'>
      <div className='h-[34px] w-[34px]'>{icon}</div>
      <p className='min-w-[25.84px] text-center text-[40px] font-semibold text-[#4285F4]'>
        {number}
      </p>
      <p className='text-[15px] font-normal text-[#868686]'>{text}</p>
    </div>
  );
};

const YourReferrals = ({
  activeSection,
  section,
  isMobile,
  registeredFriends,
  registeredAirspaces,
  validatedProperties,
}) => {
  if (activeSection !== section && isMobile) return;

  return (
    <div className='flex flex-col gap-[15px] px-[51px]'>
      <p className='text-xl font-normal text-[#222222]'>Your referrals</p>
      <p className='text-[15px] font-normal text-[#87878D]'>
        Stay in the loop on your referral influence and monitor the number of
        your friends who used your referral link or code and became part of the
        SkyTrade revolution.
      </p>
      <YourReferralsItem
        icon={<FriendsIcon />}
        number={registeredFriends}
        text={'Registered friends'}
      />
      <div className='w-[39px]' style={{ border: '1px solid #D9D9D9' }} />
      <YourReferralsItem
        icon={<EarthIcon isActive={true} />}
        number={registeredAirspaces}
        text={'Registered airspaces'}
      />
      <div className='w-[39px]' style={{ border: '1px solid #D9D9D9' }} />
      <YourReferralsItem
        icon={<PropertyIcon />}
        number={validatedProperties}
        text={'Validated properties'}
      />
    </div>
  );
};

const InviteYourFriends = () => {
  return (
    <div className='flex flex-col gap-[15px] px-[51px]'>
      <p className='text-xl font-normal text-[#222222]'>Invite your friends</p>
      <p className='text-[15px] font-normal text-[#87878D]'>
        Insert your friend's email address and send them invitations to join us.
      </p>
      <div className='relative max-w-[522px]'>
        <input
          className='w-full rounded-lg py-[16px] pl-[22px] pr-[45px] outline-none'
          style={{ border: '1px solid #87878D' }}
          type='email'
          name='friendEmail'
          id='friendEmail'
          placeholder='email address'
        />
        <div className='absolute right-[5px] top-1/2 flex h-[41px] w-[38px] -translate-y-1/2 cursor-pointer items-center justify-center rounded-lg bg-[#0653EA]'>
          <div className='h-[15px] w-[15px]'>
            <ShareIcon color={'white'} />
          </div>
        </div>
      </div>
    </div>
  );
};

const Switcher = ({ sections, activeSection, setActiveSection }) => {
  return (
    <div className='mx-auto flex items-center gap-[14px] md:hidden'>
      {sections.map((text, index) => (
        <div
          key={text}
          onClick={() => setActiveSection(index)}
          className={`${index === activeSection ? 'bg-[#222222] text-white' : 'bg-[#2222221A] text-[#222222]'} cursor-pointer rounded-[30px] p-[10px] text-[15px] font-normal`}
        >
          {text}
        </div>
      ))}
    </div>
  );
};

const Referral = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [activeSection, setActiveSection] = useState(0);
  const [data, setData] = useState({
    referralCode: '',
    registeredFriends: 0,
    registeredAirspaces: 0,
    validatedProperties: 0,
  });
  const { isMobile } = useMobile();
  const { user } = useAuth();
  const { getPropertiesByUserId } = useDatabase();
  const sections = ['The Program', 'Share', 'My Referrals'];

  useEffect(() => {
    if (!user) return;

    const {
      id,
      blockchainAddress,
      ownedReferralCode: { code },
    } = user;

    (async () => {
      try {
        const response = await getPropertiesByUserId(blockchainAddress, id);
        console.log('from the reff page', user, response);
        setData((prev) => ({
          ...prev,
          validatedProperties: response.filter((i) => i.isActive).length,
          registeredAirspaces: response.length,
        }));
      } catch (error) {
        console.log(error);
      }
    })();

    setData((prev) => ({ ...prev, referralCode: code }));
  }, [user]);

  return (
    <Fragment>
      <Head>
        <title>Referral Program</title>
      </Head>
      {isLoading &&
        createPortal(<Backdrop />, document.getElementById('backdrop-root'))}
      {isLoading &&
        createPortal(<Spinner />, document.getElementById('backdrop-root'))}

      <div className='relative flex h-screen w-screen items-center justify-center overflow-hidden rounded bg-[#F0F0FA]'>
        <Sidebar />
        <div className='flex h-full w-full flex-col'>
          <PageHeader pageTitle={'Referral Program'} />
          <section className='relative mb-[78.22px] flex h-full w-full flex-col gap-8 overflow-y-scroll py-6 md:mb-0 md:py-[37px]'>
            <Switcher
              sections={sections}
              activeSection={activeSection}
              setActiveSection={setActiveSection}
            />
            <AlertMessage />
            <TheProgram
              activeSection={activeSection}
              isMobile={isMobile}
              section={0}
            />
            <Share
              activeSection={activeSection}
              isMobile={isMobile}
              section={1}
              referralCode={data.referralCode}
              blockchainAddress={user?.blockchainAddress}
              user={user}
            />
            <YourReferrals
              activeSection={activeSection}
              isMobile={isMobile}
              section={2}
              registeredFriends={data.registeredFriends}
              registeredAirspaces={data.registeredAirspaces}
              validatedProperties={data.validatedProperties}
            />
          </section>
        </div>
      </div>
    </Fragment>
  );
};

export default Referral;
